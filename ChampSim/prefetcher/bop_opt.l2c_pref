#include "cache.h"
#include "set.h"


#define SCORE_MAX 31
#define MAX_ROUNDS 100
#define BAD_SCORE 1




uint8_t Offset_score[46];
int offset_list2[46] = {1, 5, 25, 3, 15, 9, 45, 27, 2, 10, 6, 30, 18, 4, 20, 12, 36, 8, 40, 24, 16, 48, 32, -1, -5, -25, -3, -15, -9, -45, -27, -2, -10, -6, -30, -18, -4, -20, -12, -36, -8, -40, -24, -16, -48, -32};
uint8_t current_offset_index;
uint8_t number_of_rounds;
int best_offset;
bool prefetch_off = false;
int max_score;
int best_offset_index;
int counter;
bool status;


// Function to extract k bits from p position
// and returns the extracted value as integer
uint32_t bitExtracted(uint64_t number, int k, int p){
    return (((1 << k) - 1) & (number >> (p - 1)));
}

class RRTable{
public:
  uint64_t entries[64][2];

  RRTable(){

    for(int i=0; i<64; i++){
      entries[i][0] = 0;
      entries[i][1] = 0;
    }
  }



  bool check_entry(uint64_t addr){
    uint16_t tag_addr = bitExtracted(addr, 12, 13);
    uint8_t line_addr = bitExtracted(addr, 6, 7);

    
      if((entries[line_addr][0] == tag_addr ) || (entries[line_addr][1] == tag_addr )){
        return true;
      }
    
    return false;
  }



  void insert_entry(uint64_t insert_addr, bool is_right){
    uint16_t tag_addr = bitExtracted(insert_addr, 12, 13);
    uint8_t line_addr = bitExtracted(insert_addr, 6, 7);

    if(is_right){
      entries[line_addr][1] = tag_addr;
    }
    else{
      entries[line_addr][0] = tag_addr;
    }

  }


};

struct DQ_Entry{

  uint32_t addr;

  uint8_t time_counter; // 12bits
};


class Delay_Queue{
public:
  DQ_Entry entries[15];
  uint8_t filled;
  uint8_t start;

  Delay_Queue(){
    filled = 0;
    start = 0;
  }

  bool insert_entry(uint64_t addr, uint32_t cpu){
    if(filled >= 15){
      return false;
    }

    entries[(start + filled)%15].addr = bitExtracted(addr, 18, 7);
    entries[(start + filled)%15].time_counter = current_core_cycle[cpu];
    filled ++;
    return true;
  }

  void update_per_cycle(RRTable rr_table,uint32_t cpu){

    if(current_core_cycle[cpu] - entries[start].time_counter >= DELAY){
      rr_table.insert_entry(entries[start].addr, 0);
      start = (start + 1)%15;
    }
  }
};


RRTable RR_table;
Delay_Queue DQ; 

void CACHE::l2c_prefetcher_initialize()
{
  cout << "CPU " << cpu << " L2C best Offset prefetcher" << endl;
  memset(Offset_score, 0, sizeof(Offset_score)); // setting value of each Offset as 0
  best_offset = 1;
  current_offset_index = 0;
  number_of_rounds = 0;
  max_score = 0;
  best_offset_index = 0;
  counter = 0;
  status = false;
}


uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
  uint32_t set = get_set(addr);
  int way = get_way(addr, set);


    DQ.insert_entry(addr,cpu);
    DQ.update_per_cycle(RR_table, cpu); 

    // prefetching

    counter++;
    if(!(counter % 100)){
      status = !status;
    }

    if(!prefetch_off && (!cache_hit || (cache_hit && (block[set][way].prefetch || status) ))){
      if(cache_hit){
        block[set][way].prefetch = 0;
    }

    uint64_t pf_addr = ((addr >> LOG2_BLOCK_SIZE) + best_offset) << LOG2_BLOCK_SIZE;

    prefetch_line(ip, addr, pf_addr, FILL_L2, 0);
    }

    // learning starts

    uint64_t check_addr = ((addr >> LOG2_BLOCK_SIZE) - offset_list2[current_offset_index]) << LOG2_BLOCK_SIZE;
    bool hit = RR_table.check_entry(check_addr);
    if (hit)
    {
      Offset_score[current_offset_index]++;
      if(Offset_score[current_offset_index] > max_score){
        best_offset_index = current_offset_index; 
        max_score = Offset_score[current_offset_index];
      }
    }
    if(current_offset_index == 45){
      number_of_rounds++;
      current_offset_index = 0;
      

        if (number_of_rounds == MAX_ROUNDS || max_score == SCORE_MAX)
        {
        best_offset = offset_list2[best_offset_index];
        for(int i=0;i<46;i++){
          Offset_score[i] = 0;
        }
        number_of_rounds = 0;
        if(max_score < BAD_SCORE) prefetch_off = true;
        else prefetch_off = false; 
        max_score = 0;
        }
    }
    else{
    current_offset_index++ ;
    }



  return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{if((!prefetch_off && prefetch) || prefetch_off){
  
  
    uint64_t insert_addr = ((addr >> LOG2_BLOCK_SIZE) - best_offset) << LOG2_BLOCK_SIZE;
    RR_table.insert_entry(insert_addr,1); // 1 for right bank
  
  
}
return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
  cout << "CPU " << cpu << " L2C Best Offset prefetcher final stats" << endl;
}
